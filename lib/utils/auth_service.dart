
/*
import 'package:firebase_auth/firebase_auth.dart' as firebase;  // Alias Firebase's User class



import 'package:cloud_firestore/cloud_firestore.dart';
import '/models/user.dart'; // Your local User model
import 'database_helper.dart'; // Your database helper

class AuthService {
  final firebase.FirebaseAuth _auth = firebase.FirebaseAuth.instance;

  // Sign up a new user with email and password
  Future<firebase.User?> signUpWithEmailPassword(String email, String password, String name) async {
    try {
      final firebase.UserCredential userCredential = await _auth.createUserWithEmailAndPassword(
        email: email,
        password: password,
      );

      firebase.User? user = userCredential.user; // Use firebase.User here

      if (user != null) {
        // After signing up, create the user document in Firestore
        await _createUserInFirestore(user, name);

        // Create the user in the local SQLite database
        await _createUserInLocalDatabase(user, name, email);

        return user;
      } else {
        return null;
      }
    } on firebase.FirebaseAuthException catch (e) {
      print("Sign up failed: ${e.message}");
      return null;
    }
  }

  // Create the user document in Firestore after sign up
  Future<void> _createUserInFirestore(firebase.User user, String name) async {
    try {
      DocumentReference userRef = FirebaseFirestore.instance.collection('users').doc(user.uid);
      DocumentSnapshot snapshot = await userRef.get();

      if (!snapshot.exists) {
        // Create user document with both Firebase UID and Numeric ID (will update later)
        await userRef.set({
          'userId': user.uid,  // Firebase UID as the unique identifier
          'numericId': null,   // Placeholder for numeric ID (to be updated later)
          'name': name.isNotEmpty ? name : 'Default Name',
          'email': user.email ?? '',
          'preferences': '',   // Add any other fields as needed
          'createdAt': Timestamp.now(),
        });

        print('User document created for ${user.email}');
      }
    } catch (e) {
      print('Error creating user document: $e');
    }
  }

  // Create the user in the local SQLite database
  Future<void> _createUserInLocalDatabase(firebase.User user, String name, String email) async {
    final db = DatabaseHelper();  // Assuming DatabaseHelper handles local DB operations

    // Prepare the user object for insertion (without the auto-generated ID)
    final localUser = User(
      id: null,  // Will be auto-generated by SQLite
      name: name,
      email: email,
      firebaseUid: user.uid, // Firebase UID
      preferences: '',  // Default or empty preferences
    );

    // Insert the user into the local SQLite database
    final insertedId = await db.insertUser(localUser);  // Returns auto-generated numeric ID

    // Now update Firestore document with the numericId
    await _updateNumericIdInFirestore(user.uid, insertedId);

    print("User created in local database: ${user.email}");
  }

  // Update the numeric ID in Firestore after inserting into SQLite
  Future<void> _updateNumericIdInFirestore(String firebaseUid, int numericId) async {
    try {
      // Get the Firestore document reference using the Firebase UID
      DocumentReference userRef = FirebaseFirestore.instance.collection('users').doc(firebaseUid);

      // Update the Firestore document with the numeric ID
      await userRef.update({
        'numericId': numericId,
      });

      print("Firestore user document updated with numeric ID: $numericId");
    } catch (e) {
      print('Error updating numeric ID in Firestore: $e');
    }
  }

  // Sign in an existing user with email and password
  Future<firebase.User?> signInWithEmailPassword(String email, String password) async {
    try {
      final firebase.UserCredential userCredential = await _auth.signInWithEmailAndPassword(
        email: email,
        password: password,
      );
      return userCredential.user; // Return firebase.User
    } on firebase.FirebaseAuthException catch (e) {
      print("Sign in failed: ${e.message}");
      return null;
    }
  }

  // Get the current user from FirebaseAuth
  Future<firebase.User?> getCurrentUser() async {
    try {
      final user = _auth.currentUser;
      return user;  // firebase.User
    } catch (e) {
      print("Error fetching current user: $e");
      return null;
    }
  }

  // Sign out the user
  Future<void> signOut() async {
    try {
      await _auth.signOut();
    } catch (e) {
      print("Error signing out: $e");
    }
  }
}
*/