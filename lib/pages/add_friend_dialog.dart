import 'package:flutter/material.dart';
import '../models/friend.dart';
import '../utils/database_helper.dart';
import '../utils/firestore_service.dart'; // <-- Import this file

class AddFriendDialog extends StatefulWidget {
  final Function(Friend) onAdd; // Callback for adding a new friend
  final int userId; // User ID to associate the friend with

  const AddFriendDialog({
    Key? key,
    required this.onAdd,
    required this.userId,
  }) : super(key: key);

  @override
  _AddFriendDialogState createState() => _AddFriendDialogState();
}
class _AddFriendDialogState extends State<AddFriendDialog> {
  final _nameController = TextEditingController();
  final _profileImageController = TextEditingController();
  final _formKey = GlobalKey<FormState>();

  // Create an instance of FirestoreService to use for syncing with Firebase
  final FirestoreService _firestoreService = FirestoreService();

  @override
  void dispose() {
    _nameController.dispose();
    _profileImageController.dispose();
    super.dispose();
  }

  Future<void> _saveFriend() async {
    // Validate form fields
    if (!_formKey.currentState!.validate()) {
      return;
    }

    // Create a new Friend object
    final newFriend = Friend(
      id: null, // ID is auto-generated by the database
      name: _nameController.text.trim(),
      profileImage: _profileImageController.text.trim().isEmpty
          ? 'assets/default_profile.png' // Default profile image
          : _profileImageController.text.trim(),
      upcomingEvents: 0, // Default value for new friends
      userId: widget.userId, // Associate with the provided user ID
    );

    try {
      // Insert the friend into the database
      final dbHelper = DatabaseHelper();
      final insertedId = await dbHelper.insertFriend(newFriend);

      // Update the newFriend object with the inserted ID
      final updatedFriend = newFriend.copyWith(id: insertedId);

      // Sync the friend with Firebase
      await _firestoreService.syncFriendWithFirebase(updatedFriend); // <-- Call FirestoreService

      // Call the callback to add the friend to the parent widget's state
      widget.onAdd(updatedFriend);

      // Close the dialog
      Navigator.of(context).pop();
    } catch (error) {
      print('Error adding friend: $error');
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Failed to add friend.')),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return AlertDialog(
      title: const Text('Add a Friend'),
      content: Form(
        key: _formKey,
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            // Friend Name Input
            TextFormField(
              controller: _nameController,
              decoration: const InputDecoration(labelText: 'Friend Name'),
              validator: (value) {
                if (value == null || value.trim().isEmpty) {
                  return 'Please enter a name.';
                }
                return null;
              },
            ),
            // Profile Image URL Input (Optional)
            TextFormField(
              controller: _profileImageController,
              decoration: const InputDecoration(
                labelText: 'Profile Image URL (optional)',
              ),
            ),
          ],
        ),
      ),
      actions: [
        // Cancel Button
        TextButton(
          onPressed: () => Navigator.of(context).pop(),
          child: const Text('Cancel'),
        ),
        // Add Button
        ElevatedButton(
          onPressed: _saveFriend,
          child: const Text('Add'),
        ),
      ],
    );
  }
}
